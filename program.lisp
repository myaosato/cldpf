(uiop/package:define-package :cldpf/program (:nicknames) (:use :cldpf/path :cl) (:shadow)
                             (:import-from :uiop/filesystem :file-exists-p
                              :directory-exists-p)
                             (:import-from :uiop/pathname :merge-pathnames*
                              :ensure-directory-pathname)
                             (:export :make-program) (:intern))
(in-package :cldpf/program)
;;don't edit above

(defun make-program (name &key dir)
  (let ((program-dir (make-program-directory name dir)))
    (make-program-list program-dir)
    (make-feed-list program-dir)
    (make-items-list program-dir)
    (make-items-dir program-dir)
    (make-pages-dir program-dir)))

(defun make-program-directory (name dir)
  (unless (directory-exists-p dir) (error "~A dose not exists" dir))
  (let* ((base-dir (ensure-directory-pathname dir))
         (program-dir (ensure-directory-pathname (merge-pathnames* base-dir name))))
    (when (or (directory-exists-p program-dir)
              (file-exists-p program-dir))
      (error "~A already exists" program-path))
    (ensure-directories-exist program-dir)
    program-dir))

(defun make-program-list (program-dir)
  (let ((program-list (get-program-list-path program-dir)))
    (with-open-file (out program-list :direction :output)
      (format out "(:title ~S" "your podcast name")
      (format out "~% :link ~S" "your podcast page url")
      (format out "~% :author ~S" "your name")
      (format out "~% :language ~S" "your podcast language ISO 639-1")
      (format out "~% :category ~S" "")
      (format out "~% :image ~S" "image url")
      (format out "~% :card-image ~S" "image url")
      (format out "~% :twitter ~S" "image url")
      (format out "~% :description ~S" "")
      (format out "~% :explicit nil)"))))

(defun make-feed-list (program-dir)
  (let ((feed-list (get-feed-list-path program-dir)))
    (with-open-file (out feed-list :direction :output)
      (format out "()"))))

(defun make-items-list (program-dir)
  (let ((items-file (get-items-list-path program-dir)))
    (with-open-file (out items-file :direction :output)
      (format out "()"))))

(defun make-items-dir (program-dir)
  (let ((items-dir (get-items-dir-path program-dir)))
    (ensure-directories-exist items-dir)))

(defun make-pages-dir (program-dir)
  (let (pages-dir (get-pages-dir-path program-dir))
    (ensure-directories-exist pages-dir)
    (make-audios-dir pages-dir)
    (make-notes-dir pages-dir)))

(defun make-audios-dir (program-dir)
  (let ((audios-dir (get-audios-dir-path program-dir)))
    (ensure-directories-exist audios-dir)))

(defun make-notes-dir (program-dir)
  (let ((notes-dir (get-notes-dir-path program-dir)))
    (ensure-directories-exist notes-dir)))
